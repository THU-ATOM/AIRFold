services:
  mongodb:
    image: mongodb/mongodb-community-server:latest
    volumes:
      - /data/protein/CAMEO/mongodb:/data/db
    environment:
      - TZ=Asia/Shanghai
      - MONGODB_INITDB_ROOT_USERNAME=admin
      - MONGODB_INITDB_ROOT_PASSWORD=admin123
    ports:
      - 27017:27017
  
  gui:
    build:
      context: ./gui
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
    ports:
      - "80:4173"
    volumes:
      - ./gui:/app
    command: >
      bash -c "yrm use taobao
      && yarn
      && yarn build
      && yarn preview --host --port 4173"

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
    ports:
      - "8081:8081"
    depends_on:
      - rabbitmq
      - redis
    volumes:
      - ./api:/app
      - /data:/data
      - ./lib:/app/lib
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
      - HOST=0.0.0.0
      - PORT=8081
    command: uvicorn api:app --host 0.0.0.0 --port 8081

  worker_preprocess:
    build:
      context: ./services/preprocess
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/preprocess:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_preprocess --concurrency=16
  
  worker_blast:
    build:
      context: ./services/blast
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/blast:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_blast --concurrency=16

  worker_jackhmmer:
    build:
      context: ./services/jackhmmer
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/jackhmmer:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_jackhmmer --concurrency=16

  worker_hhblits:
    build:
      context: ./services/hhblits
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/hhblits:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_hhblits --concurrency=16

  worker_mmseqs:
    build:
      context: ./services/mmseqs
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/mmseqs:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_mmseqs --concurrency=16

  worker_deepmsa:
    build:
      context: ./services/deepmsa
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/deepmsa:/worker
      - /data:/data
      - ./lib:/worker/lib
      - /tmp:/tmp
    command: celery -A worker worker --loglevel=info -Q queue_deepmsa --concurrency=16

  worker_mergemsa:
    build:
      context: ./services/mergemsa
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/mergemsa:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_mergemsa --concurrency=16

  worker_selectmsa:
    build:
      context: ./services/selectmsa
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
          - driver: "nvidia"
            count: "all"
            capabilities: ["gpu"]
    volumes:
      - ./services/selectmsa:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_selectmsa --concurrency=16

  worker_alphafold:
    build:
      context: ./services/alphafold
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
      - DOCKER_CLIENT_TIMEOUT=${DOCKER_CLIENT_TIMEOUT}
      - COMPOSE_HTTP_TIMEOUT=${COMPOSE_HTTP_TIMEOUT}
      - TF_FORCE_UNIFIED_MEMORY=${TF_FORCE_UNIFIED_MEMORY}
      - XLA_PYTHON_CLIENT_MEM_FRACTION=${XLA_PYTHON_CLIENT_MEM_FRACTION}
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
          - driver: "nvidia"
            count: "all"
            capabilities: ["gpu"]
    volumes:
      - ./services/alphafold:/worker
      - /data:/data
      - /tmp:/tmp
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_alphafold --concurrency=16

  worker_mqe:
    build:
      context: ./services/mqe
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
      - DOCKER_CLIENT_TIMEOUT=${DOCKER_CLIENT_TIMEOUT}
      - COMPOSE_HTTP_TIMEOUT=${COMPOSE_HTTP_TIMEOUT}
      - TF_FORCE_UNIFIED_MEMORY=${TF_FORCE_UNIFIED_MEMORY}
      - XLA_PYTHON_CLIENT_MEM_FRACTION=${XLA_PYTHON_CLIENT_MEM_FRACTION}
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
          - driver: "nvidia"
            count: "all"
            capabilities: ["gpu"]
    volumes:
      - ./services/mqe:/worker
      - /data:/data
      - /tmp:/tmp
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_mqe --concurrency=16

  worker_analysis:
    build:
      context: ./services/analysis
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/analysis:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_analysis --concurrency=16

  worker_submit:
    build:
      context: ./services/submit
      dockerfile: Dockerfile
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - USER_ID=${UID}
        - GROUP_ID=${GID}
        - USER_NAME=${USER_NAME}
    depends_on:
      - rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis
    volumes:
      - ./services/submit:/worker
      - /data:/data
      - ./lib:/worker/lib
    command: celery -A worker worker --loglevel=info -Q queue_submit --concurrency=16

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
      
  redis:
    image: redis:latest

  # # Optionally, you can also include Flower for monitoring the Celery tasks
  # flower:
  #   image: mher/flower
  #   command: celery --broker=amqp://rabbitmq:5672 flower --port=5555
  #   ports:
  #     - "5556:5555"
  #   depends_on:
  #     - rabbitmq

networks:
  default:
    driver: bridge
